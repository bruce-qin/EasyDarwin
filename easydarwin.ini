[http]
port=10008
default_username=admin
default_password=admin

[rtsp]
port=554

; rtsp 超时时间(毫秒)，包括RTSP建立连接与数据收发。
timeout=10000

; 是否使能gop cache。如果使能，服务器会缓存最后一个I帧以及其后的非I帧，以提高播放速度。但是可能在高并发的情况下带来内存压力。
gop_cache_enable=1

; 新的推流器连接时，如果已有同一个推流器（PATH相同）在推流，是否关闭老的推流器。
; 如果为0，则不会关闭老的推流器，新的推流器会被响应406错误，否则会关闭老的推流器，新的推流器会响应成功。
close_old=0

; 当close_old为1时，是否保留被关闭的推流器对应的播放器。
; 如果为0，则原推流器对应的播放器会被断开。否则会被保留下来。注意，如果该选项为1，可能某些播放器会有异常，因为RTP序列可能不一致了。
keep_players=0

; 当推流不存在时，拉流请求等待时间
stream_notexist_wait_second=10

; 是否使能向服务器推流或者从服务器播放时验证用户名密码. [注意] 因为服务器端并不保存明文密码，所以推送或者播放时，客户端应该输入密码的md5后的值。
; password should be the hex of md5(original password)
local_authorization_enable=0

;是否启用远程http api身份认证，与本地同时为true时以本地认证为准
remote_http_authorization_enable=0

;远程身份认证地址，必须返回`0`表示成功，否则则失败
;POST application/json {"authType":"Digest","username":"admin","password":"admin","realm":"rtsp(23435)","nonce":"8fd7c44874480bd6...","uri":"rtsp://192.168.1.76:554/live/123asd","response":"ca29ba3....","requestMethod":"SETUP"}
;authType:Basic;Digest
;为`Basic`时只有`username`和`password`
;为`Digest`时没有`passord`,认证算法匹配response==MD5(MD5(username:realm:password):nonce:MD5(method:uri))
remote_http_authorization_url=

;身份认证方式:Basic;Digest
authorization_type=Digest

; 是否使能推送的同事进行本地存储，使能后则可以进行录像查询与回放。
save_stream_to_local=0
;是否启用http音频拉流监听
enable_http_audio_stream=1
;是否启用http视频拉流监听
enable_http_video_stream=0
;http音频拉流监听端口
http_audio_stream_port=8088
;http视频拉流监听端口
http_video_stream_port=8099
;nginx rtmp-hls文件存储目录
nginx_rtmp_hls_dir_map=/var/nginx/hls

;easydarwin使用ffmpeg工具来进行存储。这里表示ffmpeg的可执行程序的路径
ffmpeg_path=ffmpeg

;本地存储所将要保存的根目录。如果不存在，程序会尝试创建该目录。
m3u8_dir_path=/home/media/hls

;切片文件时长。本地存储时，将以该时间段为标准来生成ts文件(该时间+一个I帧间隔)，单位秒。
;如果需要直播，这个值设小点，但是这样会产生很多ts文件；如果不需要直播，只要存储的话，可设大些。
ts_duration_second=6

;key为拉流时的自定义路径，value为ffmpeg转码格式，比如可设置为-c:v copy -c:a copy，表示copy源格式；default表示使用ffmpeg内置的输出格式，会进行转码。
/stream_265=default

;rtsp，rtp udp推流时服务端udp端口范围
rtpserver_udport_range=50000:55000

;是否启用组播集群
enable_multicast=1

;启用组播集群时绑定网卡
multicast_svc_bind_inf=

;开始拉流时触发api调用,多个用`;`分割，必须返回`0`表示成功，否则则失败，会使客户端不能开播，多个时轮训调用，只要成功一个就不在调用后续的地址
on_play=
;停止拉流时触发api调用,多个用`;`分割，必须返回`0`表示成功，否则则失败，多个时轮训调用，只要成功一个就不在调用后续的地址
on_stop=
;开始推流时触发api调用,多个用`;`分割，必须返回`0`表示成功，否则则失败，会使客户端不能推流，多个时轮训调用，只要成功一个就不在调用后续的地址
on_publish=
;停止推流时触发api调用,多个用`;`分割，必须返回`0`表示成功，否则则失败，多个时轮训调用，只要成功一个就不在调用后续的地址
on_teardown=

[cmd]
;cmd推流错误时重试次数
cmd_error_repeat_time=5
;推流时执行ffmpeg命令，变量 {path},可以使用 `EASYDARWIN_PUSH_FFMPEG_CMD`环境变量替换，优先使用用环境变量，环境变量值多个用英文`;`分割。环境变量存在时不再使用配置文件
;所有推流都执行
;all_execute_1=ffmpeg -i rtsp://127.0.0.1/{path} -c copy -f rtp rtp://127.0.0.1:12348
;all_execute_2=ffmpeg -i rtsp://127.0.0.1/{path} -c copy -f rtp rtp://127.0.0.1:12349
;指定一级路径为live和ipc时分别执行对应的命令，path只有一级是的key为:`__default__`
;可以使用 `EASYDARWIN_PUSH_FFMPEG_MAP_CMD_{pathKey}`环境变量替换，优先使用用环境变量，环境变量值多个用英文`;`分割。环境变量存在时不再使用配置文件
;map_execute_live=ffmpeg -i rtsp://127.0.0.1/{path} -c copy -f rtp rtp://127.0.0.1:12349
;map_execute_ipc=ffmpeg -i rtsp://127.0.0.1/{path} -c copy -f rtp rtp://127.0.0.1:12349
;如果map中没有找到相应的key时运行other ffmpeg转码命令
;可以使用 `EASYDARWIN_PUSH_FFMPEG_OTHER_CMD`环境变量替换，优先使用用环境变量，环境变量值多个用英文`;`分割。环境变量存在时不再使用配置文件
;other_execute_1=ffmpeg -i rtsp://127.0.0.1/{path} -c copy -f rtp rtp://127.0.0.1:12348
;other_execute_2=ffmpeg -i rtsp://127.0.0.1/{path} -c copy -f rtp rtp://127.0.0.1:12349